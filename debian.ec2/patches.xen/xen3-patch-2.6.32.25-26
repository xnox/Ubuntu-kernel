From: Jiri Slaby <jslaby@suse.cz>
Subject: Linux 2.6.32.26
Patch-mainline: 2.6.32.26

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
Automatically created from "patches.kernel.org/patch-2.6.32.25-26" by xen-port-patches.py

--- sle11sp1-2010-11-30.orig/arch/x86/include/mach-xen/asm/io.h	2009-11-06 10:52:02.000000000 +0100
+++ sle11sp1-2010-11-30/arch/x86/include/mach-xen/asm/io.h	2010-11-30 11:06:49.000000000 +0100
@@ -180,6 +180,7 @@ static inline void __iomem *ioremap(reso
 
 extern void iounmap(volatile void __iomem *addr);
 
+extern void set_iounmap_nonlazy(void);
 
 #ifdef CONFIG_X86_32
 # include "../../asm/io_32.h"
--- sle11sp1-2010-11-30.orig/arch/x86/include/mach-xen/asm/smp.h	2010-04-26 11:32:06.000000000 +0200
+++ sle11sp1-2010-11-30/arch/x86/include/mach-xen/asm/smp.h	2010-11-30 11:06:49.000000000 +0100
@@ -54,7 +54,7 @@ struct smp_ops {
 	void (*smp_prepare_cpus)(unsigned max_cpus);
 	void (*smp_cpus_done)(unsigned max_cpus);
 
-	void (*smp_send_stop)(void);
+	void (*stop_other_cpus)(int wait);
 	void (*smp_send_reschedule)(int cpu);
 
 	int (*cpu_up)(unsigned cpu);
@@ -73,7 +73,12 @@ extern struct smp_ops smp_ops;
 
 static inline void smp_send_stop(void)
 {
-	smp_ops.smp_send_stop();
+	smp_ops.stop_other_cpus(0);
+}
+
+static inline void stop_other_cpus(void)
+{
+	smp_ops.stop_other_cpus(1);
 }
 
 static inline void smp_prepare_boot_cpu(void)
@@ -142,12 +147,16 @@ int wbinvd_on_all_cpus(void);
 
 extern int __cpu_disable(void);
 extern void __cpu_die(unsigned int cpu);
-void xen_smp_send_stop(void);
+void xen_stop_other_cpus(int wait);
 void xen_smp_send_reschedule(int cpu);
 void xen_send_call_func_ipi(const struct cpumask *mask);
 void xen_send_call_func_single_ipi(int cpu);
 
-#define smp_send_stop		xen_smp_send_stop
+static inline void smp_send_stop(void)
+{
+	xen_stop_other_cpus(0);
+}
+
 #define smp_send_reschedule	xen_smp_send_reschedule
 #define arch_send_call_function_single_ipi	xen_send_call_func_single_ipi
 #define arch_send_call_function_ipi_mask	xen_send_call_func_ipi
--- sle11sp1-2010-11-30.orig/arch/x86/kernel/smp-xen.c	2010-08-17 12:18:28.000000000 +0200
+++ sle11sp1-2010-11-30/arch/x86/kernel/smp-xen.c	2010-11-30 11:06:49.000000000 +0100
@@ -142,10 +142,10 @@ irqreturn_t smp_reboot_interrupt(int irq
 	return IRQ_HANDLED;
 }
 
-void xen_smp_send_stop(void)
+void xen_stop_other_cpus(int wait)
 {
 	unsigned long flags;
-	unsigned long wait;
+	unsigned long timeout;
 
 	/*
 	 * Use an own vector here because smp_call_function
@@ -159,9 +159,12 @@ void xen_smp_send_stop(void)
 	if (num_online_cpus() > 1) {
 		xen_send_IPI_allbutself(REBOOT_VECTOR);
 
-		/* Don't wait longer than a second */
-		wait = USEC_PER_SEC;
-		while (num_online_cpus() > 1 && wait--)
+		/*
+		 * Don't wait longer than a second if the caller
+		 * didn't ask us to wait.
+		 */
+		timeout = USEC_PER_SEC;
+		while (num_online_cpus() > 1 && (wait || timeout--))
 			udelay(1);
 	}
 

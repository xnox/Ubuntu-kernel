#!/usr/bin/env python
#
# Called by the ceph provisioning job. This script generates a directory
# and set of configuration files for each node in the ceph test cluster.
#

from sys                                import stdout, argv, exit
from os                                 import getenv, path, mkdir, makedirs, chdir
from shutil                             import rmtree
from lib.argparse                       import ArgumentParser
from logging                            import debug, info, basicConfig, DEBUG, INFO

# Exit
#
class Exit():
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# CephFactory
#
class CephFactory():

    # __init__
    #
    def __init__(self, args):
        self.cfg = args
        self.subnet = '192.168.122'
        self.current_ip = 1

    def mknode(self, dictionary, name_prefix, index):
        name = '%s.%d' % (name_prefix, index)
        n = {}
        n['ip'] = '%s.%d' % (self.subnet, self.current_ip)
        n['name'] = '%s-%d' % (name_prefix, index)
        dictionary[name] = n
        self.current_ip += 1
        return dictionary

    def mkhosts(self, dictionary):
        retval = ''
        for k in sorted(dictionary):
            retval += '%s    %s\n' % (dictionary[k]['ip'], dictionary[k]['name'])
        return retval

    def mkceph_config(self, dictionary):
        retval = '[osd]\n'
        retval += '    osd journal size = 1000\n'
        retval += '    filestore xattr use omap = true\n'
        retval += '\n'
        for k in sorted(dictionary):
            retval += '[%s]\n' % k
            retval += '    host = %s\n' % dictionary[k]['name']
            if 'mon' in dictionary[k]['name']:
                retval += '    mon addr = %s:6789\n' % dictionary[k]['ip']
            retval += '\n'

        return retval

    def mkinterfaces(self, ip):
        retval = 'auto eth0\n'
        retval += 'iface eth0 inet static\n'
        retval += 'address %s\n' % ip
        retval += 'netmask 255.255.255.0\n'
        retval += 'gateway 192.168.122.1\n'
        return retval

    # main
    #
    def main(self):
        retval = 1

        root = 'ceph-config'
        if path.exists(root):
            rmtree(root)
        makedirs(root)

        try:
            # Create a dictionary of all the configuration information
            #
            nodes = {}
            for x in range(0, self.cfg.metadata_servers):
                self.mknode(nodes, 'mds', x)

            for x in range(0, self.cfg.objectstore_servers):
                self.mknode(nodes, 'osd', x)

            for x in range(0, self.cfg.monitor_servers):
                self.mknode(nodes, 'mon', x)

            hosts = self.mkhosts(nodes)
            ceph_config = self.mkceph_config(nodes)

            for k in nodes:
                n = path.join(root, '%s' % nodes[k]['name'])
                makedirs(n)

                fid = path.join(n, 'hosts')
                with open(fid, 'w') as f:
                    f.write(hosts)

                fid = path.join(n, 'ceph.conf')
                with open(fid, 'w') as f:
                    f.write(ceph_config)

                interfaces = self.mkinterfaces(nodes[k]['ip'])
                fid = path.join(n, 'interfaces')
                with open(fid, 'w') as f:
                    f.write(interfaces)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        return retval


if __name__ == '__main__':

    result = 0

    if getenv('DEBUG'):
        LOGLEVEL = DEBUG
    else:
        LOGLEVEL = INFO
    basicConfig(level=LOGLEVEL, format="%(asctime)-15s-%(levelname)s - %(message)s")
    info('Started')

    parser = ArgumentParser()

    parser.add_argument('--metadata-servers',    required=False, default=1, type=int, help='Number of metadata servers to instantiate and configure.')
    parser.add_argument('--objectstore-servers', required=False, default=1, type=int, help='Number of object-store servers to instantiate and configure.')
    parser.add_argument('--monitor-servers',     required=False, default=1, type=int, help='Number of monitor servers to instantiate and configure.')

    args = parser.parse_args()

    app = CephFactory(args)
    result = app.main()

    info('That\'s All Folks!')
    exit(result)

# vi:set ts=4 sw=4 expandtab:

